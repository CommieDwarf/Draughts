{"version":3,"file":"chessboard.js","sourceRoot":"","sources":["../../../src/components/board/chessboard.tsx"],"names":[],"mappings":"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","sourcesContent":["\r\nimport React, { ReactElement } from 'react';\r\nimport Square from './square';\r\nimport { Engine, IChessboard } from '../../engine';\r\nimport { Color } from './getPieceJSX';\r\nimport CloseGame from \"./CloseGame\"\r\nimport Game, { GAMEMODE } from '../../game';\r\n\r\ntype props = {\r\n\r\n}\r\n\r\ntype state = {\r\n    bGAnimationColor: \"white\" | \"green\"\r\n}\r\n\r\nexport default class Chessboard extends React.Component<props, state> {\r\n\r\n    props: {\r\n        engine: Engine;\r\n        game: Game;\r\n        preview: boolean,\r\n        label?: string;\r\n        setWinner?: (color: Color) => void;\r\n        closeGame?: (gameId: number) => void;\r\n        switchGame?: (gameId: number) => void;\r\n    }\r\n\r\n    chessboardRef: React.RefObject<HTMLDivElement>;\r\n    timeout: null | ReturnType<typeof setTimeout>\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.props = props;\r\n        this.chessboardRef = React.createRef();\r\n        this.timeout = null;\r\n    }\r\n\r\n    getPieceType(id: number) {\r\n        let engine = this.props.engine;\r\n        if (engine.selectedPiece == id) {\r\n            return 'selected';\r\n        } else if (engine.lockedPieces.includes(id)) {\r\n            return \"locked\";\r\n        } else if (engine.killablePieces.includes(id)) {\r\n            return \"killable\";\r\n        } else {\r\n            return 'normal';\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getBgAnimationClass() {\r\n        if (this.props.engine.turn == this.props.game.playerColor) {\r\n            return \"bg-animation--green\";\r\n        } else  {\r\n            return \"bg-animation--white\";\r\n        }\r\n    }\r\n\r\n    forceUpdateHandler = () => {\r\n        this.forceUpdate();\r\n        if (this.props.engine.winner && this.props.setWinner) {\r\n            this.props.setWinner(this.props.engine.winner);\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.props.switchGame) {\r\n            this.props.switchGame(this.props.game.id);\r\n        }\r\n        console.log(\"handle\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"chessboardChanged\", this.forceUpdateHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"chessboardChanged\", this.forceUpdateHandler);\r\n    }\r\n\r\n    render() {\r\n        const {engine} = this.props;\r\n        const {game} = this.props;\r\n        let squares = [];\r\n        if (engine.chessboard.length > 0) {\r\n\r\n            let className = \"chessboard__square chessboard__square--black\";\r\n            let pieceColor: \"black\" | \"white\" | \"\";\r\n\r\n            for (let row = 1; row <= 8; row++) {\r\n                for (let column = 1; column <= 8; column++) {\r\n                    if (className == \"chessboard__square chessboard__square--white\") {\r\n                        className = \"chessboard__square chessboard__square--black\"\r\n                    } else {\r\n                        className = \"chessboard__square chessboard__square--white\"\r\n                    }\r\n                    let id = (row - 1) * 8 + column - 1;\r\n                    if (engine.availableMoves.includes(id)) {\r\n                        className += \" chessboard__square--hightlight\";\r\n                    }\r\n                    pieceColor = engine.chessboard[id]['piece'];\r\n                    let queen = engine.chessboard[id][\"queen\"];\r\n\r\n\r\n                    squares.push(<Square id={id.toString()} className={className} key={id} pieceColor={pieceColor} type={this.getPieceType(id)} queen={queen} />)\r\n                }\r\n                if (className == \"chessboard__square chessboard__square--white\") {\r\n                    className = \"chessboard__square chessboard__square--black\"\r\n                } else {\r\n                    className = \"chessboard__square chessboard__square--white\"\r\n                }\r\n            }\r\n        }\r\n\r\n        let previewWrapperClass = \"\";\r\n        let previewChessboardClass = \"\";\r\n\r\n        let closeIcon: ReactElement | \"\" = \"\";\r\n        let label: ReactElement | \"\" = \"\";\r\n\r\n        if (this.props.preview) {\r\n            previewWrapperClass = \"game-preview__chessboard-wrapper\";\r\n            previewChessboardClass = \"game-preview__chessboard\";\r\n            closeIcon = <CloseGame gameId={game.id} closeGame={this.props.closeGame} game={this.props.game}/>\r\n            let playerLabelClass = \"\";\r\n                if (this.props.game.gameMode == GAMEMODE.ONLINE) {\r\n                    playerLabelClass = \"game-label__label--green\";\r\n                }\r\n            label = (\r\n                <div className={\"game-preview__label \" + playerLabelClass}>\r\n                    {this.props.label}\r\n                </div>\r\n            )\r\n        }\r\n\r\n \r\n        const bgAnimationClass = this.getBgAnimationClass();\r\n\r\n        return (\r\n            <div className={previewWrapperClass} onClick={this.handleClick}>\r\n                {label}\r\n                <div className={\"chessboard bg-animation \" + bgAnimationClass + \" \" + previewChessboardClass} \r\n                 ref={this.chessboardRef}>\r\n                    {squares}\r\n                </div>\r\n                {closeIcon}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"]}