{"version":3,"file":"chessboard.js","sourceRoot":"","sources":["../../../src/components/board/chessboard.tsx"],"names":[],"mappings":"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","sourcesContent":["\r\nimport React, { ReactElement } from 'react';\r\nimport Square from './square';\r\nimport { IChessboard } from '../../engine';\r\nimport { Color } from './getPieceJSX';\r\n\r\ntype props = {\r\n\r\n}\r\n\r\ntype state = {\r\n    bGAnimationColor: \"white\" | \"green\"\r\n}\r\n\r\nexport default class Chessboard extends React.Component<props, state> {\r\n\r\n    props: {\r\n        engine: {\r\n            selectedPiece: number | null,\r\n            lockedPieces: number[],\r\n            killablePieces: number[],\r\n            availableMoves: number[],\r\n            chessboard: IChessboard,\r\n            turn: \"black\" | \"white\",\r\n            winner: \"\" | Color,\r\n        };\r\n        game: {\r\n            playerColor: \"black\" | \"white\";\r\n        };\r\n        preview: boolean,\r\n        id: number,\r\n        label?: string;\r\n        setWinner?: (color: Color) => void;\r\n    }\r\n\r\n    chessboardRef: React.RefObject<HTMLDivElement>;\r\n    timeout: null | ReturnType<typeof setTimeout>\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.props = props;\r\n        this.chessboardRef = React.createRef();\r\n        this.timeout = null;\r\n    }\r\n\r\n    getPieceType(id: number) {\r\n        let engine = this.props.engine;\r\n        if (engine.selectedPiece == id) {\r\n            return 'selected';\r\n        } else if (engine.lockedPieces.includes(id)) {\r\n            return \"locked\";\r\n        } else if (engine.killablePieces.includes(id)) {\r\n            return \"killable\";\r\n        } else {\r\n            return 'normal';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setBackgroundColor();\r\n    }\r\n\r\n    setBackgroundColor() {\r\n        if (this.props.engine.turn == this.props.game.playerColor && this.chessboardRef.current) {\r\n            this.chessboardRef.current.style.color = \"lightgreen\";\r\n        } else if (this.chessboardRef.current) {\r\n            this.chessboardRef.current.style.color = \"white\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {engine} = this.props;\r\n        const {game} = this.props;\r\n        let squares = [];\r\n\r\n        if (engine.chessboard.length > 0) {\r\n\r\n            let className = \"square\";\r\n            let pieceColor: \"black\" | \"white\" | \"\";\r\n\r\n            for (let row = 1; row <= 8; row++) {\r\n                for (let column = 1; column <= 8; column++) {\r\n                    className = className == \"square white\" ? \"square\" : \"square white\";\r\n                    let id = (row - 1) * 8 + column - 1;\r\n                    if (engine.availableMoves.includes(id)) {\r\n                        className += \" highlightedSquare\";\r\n                    }\r\n                    pieceColor = engine.chessboard[id]['piece'];\r\n                    let queen = engine.chessboard[id][\"queen\"];\r\n\r\n\r\n                    squares.push(<Square id={id.toString()} className={className} key={id} pieceColor={pieceColor} type={this.getPieceType(id)} queen={queen} />)\r\n                }\r\n                className = className == \"square white\" ? \"square\" : \"square white\";\r\n            }\r\n        }\r\n\r\n        let previewWrapperClass = \"\";\r\n        let previewChessboardClass = \"\";\r\n        let id = this.props.id ? this.props.id : 0;\r\n\r\n        let closeIcon: ReactElement | \"\" = \"\";\r\n        let label: ReactElement | \"\" = \"\";\r\n\r\n        if (this.props.preview) {\r\n            previewWrapperClass = \"game-preview__chessboard-wrapper\";\r\n            previewChessboardClass = \"game-preview__chessboard\";\r\n            closeIcon = (\r\n                <div id={\"close-game-\" + id} className=\"game-preview__close-game\">\r\n                    <i className=\"icon-cancel-circled\"></i>\r\n                </div>)\r\n            label = (\r\n                <div id={\"game-label-preview-\" + id} className=\"game-preview__label\">\r\n                    {this.props.label}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        \r\n        this.setBackgroundColor();\r\n\r\n        return (\r\n            <div className={previewWrapperClass}>\r\n                {label}\r\n                <div className={\"chessboard bg-animation \" + previewChessboardClass} id={(\"chessboard-\" + id)} ref={this.chessboardRef}>\r\n                    {squares}\r\n                </div>\r\n                {closeIcon}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"]}