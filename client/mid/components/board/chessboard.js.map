{"version":3,"file":"chessboard.js","sourceRoot":"","sources":["../../../src/components/board/chessboard.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactElement } from \"react\";\r\nimport Square from \"./square\";\r\nimport { Engine, IChessboard } from \"../../engine\";\r\nimport { Color } from \"./getPieceJSX\";\r\nimport CloseGame from \"./CloseGame\";\r\nimport Game, { GAMEMODE } from \"../../game\";\r\nimport WinMenu from \"./winMenu\";\r\nimport { IPlayer } from \"../lobby/lobby\";\r\nimport { Rematch } from \"../../App\";\r\ntype props = {};\r\n\r\ntype state = {\r\n  bGAnimationColor: \"white\" | \"green\";\r\n};\r\n\r\nexport default class Chessboard extends React.Component<props, state> {\r\n  props: {\r\n    engine: Engine;\r\n    game: Game;\r\n    preview: boolean;\r\n    label?: string;\r\n    setWinner?: (color: Color) => void;\r\n    closeGame?: (gameId: number) => void;\r\n    switchGame?: (gameId: number) => void;\r\n    restartGame?: (gameId: number) => void;\r\n    player?: IPlayer;\r\n    rematch?: Rematch;\r\n  };\r\n\r\n  chessboardRef: React.RefObject<HTMLDivElement>;\r\n  timeout: null | ReturnType<typeof setTimeout>;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.props = props;\r\n    this.chessboardRef = React.createRef();\r\n    this.timeout = null;\r\n  }\r\n\r\n  getPieceType(id: number) {\r\n    let engine = this.props.engine;\r\n    if (engine.selectedPiece == id) {\r\n      return \"selected\";\r\n    } else if (engine.lockedPieces.includes(id)) {\r\n      return \"locked\";\r\n    } else if (engine.killablePieces.includes(id)) {\r\n      return \"killable\";\r\n    } else {\r\n      return \"normal\";\r\n    }\r\n  }\r\n\r\n  getBgAnimationClass() {\r\n    if (this.props.engine.turn == this.props.game.playerColor) {\r\n      return \"bg-animation--green\";\r\n    } else {\r\n      return \"bg-animation--white\";\r\n    }\r\n  }\r\n\r\n  forceUpdateHandler = () => {\r\n    this.forceUpdate();\r\n    if (this.props.engine.winner && this.props.setWinner) {\r\n      this.props.setWinner(this.props.engine.winner);\r\n    }\r\n  };\r\n\r\n  handleClick = () => {\r\n    if (this.props.switchGame) {\r\n      this.props.switchGame(this.props.game.id);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"chessboardChanged\", this.forceUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"chessboardChanged\", this.forceUpdateHandler);\r\n  }\r\n\r\n  render() {\r\n    const { engine } = this.props;\r\n    const { game } = this.props;\r\n    let squares = [];\r\n    if (engine.chessboard.length > 0) {\r\n      let className = \"chessboard__square chessboard__square--black\";\r\n      let pieceColor: \"black\" | \"white\" | \"\";\r\n\r\n      for (let row = 1; row <= 8; row++) {\r\n        for (let column = 1; column <= 8; column++) {\r\n          if (className == \"chessboard__square chessboard__square--white\") {\r\n            className = \"chessboard__square chessboard__square--black\";\r\n          } else {\r\n            className = \"chessboard__square chessboard__square--white\";\r\n          }\r\n          let id = (row - 1) * 8 + column - 1;\r\n          if (engine.availableMoves.includes(id)) {\r\n            className += \" chessboard__square--hightlight\";\r\n          }\r\n          pieceColor = engine.chessboard[id][\"piece\"];\r\n          let queen = engine.chessboard[id][\"queen\"];\r\n\r\n          squares.push(\r\n            <Square\r\n              id={id.toString()}\r\n              className={className}\r\n              key={id}\r\n              pieceColor={pieceColor}\r\n              type={this.getPieceType(id)}\r\n              queen={queen}\r\n            />\r\n          );\r\n        }\r\n        if (className == \"chessboard__square chessboard__square--white\") {\r\n          className = \"chessboard__square chessboard__square--black\";\r\n        } else {\r\n          className = \"chessboard__square chessboard__square--white\";\r\n        }\r\n      }\r\n    }\r\n\r\n    let previewWrapperClass = \"\";\r\n    let previewChessboardClass = \"\";\r\n\r\n    let closeIcon: ReactElement | \"\" = \"\";\r\n    let label: ReactElement | \"\" = \"\";\r\n\r\n    if (this.props.preview) {\r\n      previewWrapperClass = \"game-preview__chessboard-wrapper\";\r\n      previewChessboardClass = \"game-preview__chessboard\";\r\n      closeIcon = (\r\n        <CloseGame\r\n          gameId={game.id}\r\n          closeGame={this.props.closeGame}\r\n          game={this.props.game}\r\n        />\r\n      );\r\n      let playerLabelClass = \"\";\r\n      if (this.props.game.gameMode == GAMEMODE.ONLINE) {\r\n        playerLabelClass = \"game-label__label--green\";\r\n      }\r\n      label = (\r\n        <div className={\"game-preview__label \" + playerLabelClass}>\r\n          {this.props.label}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const bgAnimationClass = this.getBgAnimationClass();\r\n\r\n    return (\r\n      <div className={previewWrapperClass} onClick={this.handleClick}>\r\n        {label}\r\n\r\n        <div\r\n          className={\r\n            \"chessboard bg-animation \" +\r\n            bgAnimationClass +\r\n            \" \" +\r\n            previewChessboardClass\r\n          }\r\n          ref={this.chessboardRef}\r\n        >\r\n          {this.props.game.engine.winner &&\r\n            this.props.restartGame &&\r\n            this.props.player && (\r\n              <WinMenu\r\n                winner={engine.winner}\r\n                restart={this.props.restartGame}\r\n                game={this.props.game}\r\n                player={this.props.player}\r\n                rematch={this.props.rematch}\r\n              />\r\n            )}\r\n          {squares}\r\n        </div>\r\n        {closeIcon}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}