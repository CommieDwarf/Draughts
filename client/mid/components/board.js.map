{"version":3,"file":"Board.js","sourceRoot":"","sources":["../../src/components/Board.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport Chessboard from \"./board/Chessboard\";\r\nimport Label from \"./Label\";\r\n\r\nimport Game, { GAMEMODE } from \"../game\";\r\nimport { Color } from \"./board/getPieceJSX\";\r\nimport { socket } from \"../main\";\r\nimport { ISquare } from \"../engine\";\r\nimport { IPlayer } from \"./lobby/Lobby\";\r\nimport { Rematch } from \"../App\";\r\n\r\nexport interface GameInfo {\r\n  chessboard: ISquare[];\r\n  id: number | undefined;\r\n  turn: \"black\" | \"white\";\r\n  winner: \"black\" | \"white\" | \"\";\r\n  roomId: string;\r\n};\r\n\r\ninterface State {\r\n  contextMenu: {\r\n    piece: string;\r\n    queen: boolean;\r\n    i: number;\r\n    clientX: number;\r\n    clientY: number;\r\n    showMenu: boolean;\r\n  };\r\n  winner: \"\" | Color;\r\n};\r\ninterface Props {\r\n  game: Game;\r\n    restartGame: (gameId: number) => void;\r\n    player: IPlayer;\r\n    rematches: Rematch[];\r\n};\r\n\r\nexport default class Board extends React.Component<Props, State> {\r\n\r\n\r\n  interval: ReturnType<typeof setTimeout> | null;\r\n  contextMenuRef: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      contextMenu: {\r\n        piece: \"\",\r\n        queen: false,\r\n        i: 0,\r\n        clientX: 0,\r\n        clientY: 0,\r\n        showMenu: false,\r\n      },\r\n      winner: \"\",\r\n    };\r\n    this.contextMenuRef = React.createRef();\r\n    this.interval = null;\r\n  }\r\n\r\n  setWinner = (winner: Color) => {\r\n    this.setState({\r\n      winner: winner,\r\n    });\r\n  };\r\n\r\n  clickHandler = (event: any) => {\r\n    this.props.game.clickHandler(event);\r\n    if (this.props.game.gameMode == GAMEMODE.ONLINE && this.props.game.roomId) {\r\n      let gameInfo: GameInfo = {\r\n        chessboard: this.props.game.engine.chessboard,\r\n        id: this.props.game.id,\r\n        turn: this.props.game.engine.turn,\r\n        winner: this.props.game.engine.winner,\r\n        roomId: this.props.game.roomId,\r\n      };\r\n      socket.emit(\"make_move\", gameInfo);\r\n    }\r\n  };\r\n\r\n  hideContextMenu = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contextMenu: { ...prevState.contextMenu, showMenu: false },\r\n      };\r\n    });\r\n  };\r\n\r\n  onContextHandler = (event: any) => {\r\n    event.preventDefault();\r\n    let engine = this.props.game.engine;\r\n\r\n    let square = event.target.closest(\".chessboard__square\");\r\n    if (\r\n      square &&\r\n      square.className !== \"chessboard__square chessboard__square--white\"\r\n    ) {\r\n      let id = square.getAttribute(\"id\");\r\n      const queen = engine.chessboard[id][\"queen\"];\r\n      const piece = engine.chessboard[id][\"piece\"];\r\n      let clientRect = square.getBoundingClientRect();\r\n      let clientX = clientRect.left;\r\n      let clientY = clientRect.top;\r\n      const width = square.offsetWidth;\r\n      const height = square.offsetHeight;\r\n      clientX += width / 2;\r\n      clientY += height / 2 + 10;\r\n\r\n      this.setState({\r\n        contextMenu: {\r\n          piece: piece,\r\n          queen: queen,\r\n          i: id,\r\n          clientX: clientX,\r\n          clientY: clientY,\r\n          showMenu: true,\r\n        },\r\n      });\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  render() {\r\n    if (restartFlag) {\r\n      restartFlag = false;\r\n    }\r\n    let engine = this.props.game.engine;\r\n    const rematch = this.props.rematches.find(\r\n      (r) => r.gameId == this.props.game.id\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className=\"board\"\r\n        onClick={this.clickHandler}\r\n        onContextMenu={this.onContextHandler}\r\n      >\r\n        <Label side=\"top\"/>\r\n        <Label side=\"left\"/>\r\n        <Label side=\"right\"/>\r\n        <Chessboard\r\n          engine={engine}\r\n          preview={false}\r\n          game={this.props.game}\r\n          setWinner={this.setWinner}\r\n          restartGame={this.props.restartGame}\r\n          player={this.props.player}\r\n          rematch={rematch}\r\n        />\r\n        <Label side=\"bot\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet restartFlag = false;\r\n"]}