{"version":3,"file":"engine.js","sourceRoot":"","sources":["../src/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { SIDE } from \"./config\";\r\nimport * as utility from \"./utility\";\r\n\r\ntype Border = \"border-top\" | \"border-left\" | \"border-right\" | \"border-bot\";\r\n\r\nexport interface ISquare {\r\n  id: number;\r\n  piece: \"black\" | \"white\" | \"\";\r\n  square: string;\r\n  \"border-top\": boolean;\r\n  \"border-left\": boolean;\r\n  \"border-right\": boolean;\r\n  \"border-bot\": boolean;\r\n  queen: boolean;\r\n}\r\n// for kill routes tracking\r\ninterface IPosition {\r\n  move: number;\r\n  depth: number;\r\n  prev: null | IPosition;\r\n  board: IChessboard;\r\n  visited: Set<number>;\r\n}\r\ntype Moves = Move[];\r\ntype Turn = \"black\" | \"white\";\r\nexport type IChessboard = ISquare[];\r\n\r\nexport type Move = {\r\n  piece: number;\r\n  move: number;\r\n  kill: number | null;\r\n};\r\n\r\nexport class Engine {\r\n  chessboard: IChessboard;\r\n  turn: Turn;\r\n  selectedPiece: number | null;\r\n  playerSide: string;\r\n  availableMoves: number[];\r\n  selectionLock: boolean;\r\n  lockedPieces: number[];\r\n  killablePieces: number[];\r\n  winner: Turn | \"\";\r\n  whiteSide: \"top\" | \"bot\";\r\n\r\n  constructor(side: SIDE) {\r\n    this.whiteSide = side == SIDE.NORMAL ? \"bot\" : \"top\";\r\n    this.playerSide = this.whiteSide; // this is turn side. Player is always bot\r\n    this.chessboard = [];\r\n    this.turn = \"white\";\r\n    this.selectedPiece = null;\r\n    this.availableMoves = [];\r\n    this.selectionLock = false;\r\n    this.lockedPieces = [];\r\n    this.killablePieces = [];\r\n    this.winner = \"\";\r\n  }\r\n\r\n  dispatchEvent() {\r\n    // dispatching event in order react to update\r\n    document.dispatchEvent(new Event(\"chessboardChanged\"));\r\n  }\r\n\r\n  setWinner(chessboard: IChessboard, turn: Turn, playerSide: string) {\r\n    const allMoves = this.getAllMoves(chessboard, turn, playerSide);\r\n    const opponent = turn == \"white\" ? \"black\" : \"white\";\r\n    if (allMoves.length == 0) {\r\n      this.winner = opponent;\r\n      return opponent;\r\n    }\r\n  }\r\n\r\n  public unselectPiece() {\r\n    this.selectedPiece = null;\r\n  }\r\n  private selectPiece(id: number | null) {\r\n    this.selectedPiece = id;\r\n  }\r\n  private setAvailableMoves(moves: Moves) {\r\n    let movesOnly = [];\r\n    for (let move of moves) {\r\n      movesOnly.push(move.move);\r\n    }\r\n    this.availableMoves = movesOnly;\r\n  }\r\n  private unsetAvailableMoves() {\r\n    this.availableMoves = [];\r\n  }\r\n  private lockPieces(pieces: number[]) {\r\n    this.lockedPieces = pieces;\r\n  }\r\n  private unlockPieces() {\r\n    this.lockedPieces = [];\r\n  }\r\n  private getRoutesStarts(routes: number[][]) {\r\n    let array = [];\r\n    for (let i = 0; i < routes.length; i++) {\r\n      array.push(routes[i][0]);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /////////////////////////////// MAIN FUNCTION\r\n  public performAction(\r\n    clickedId: number | null,\r\n    chessboard: IChessboard\r\n  ): void {\r\n    const oldState = {\r\n      selectedPiece: this.selectedPiece,\r\n      chessboard: JSON.stringify(this.chessboard),\r\n      turn: this.turn,\r\n    };\r\n    let killMoves = this.getAllMovesWithKill(\r\n      chessboard,\r\n      this.turn,\r\n      this.playerSide\r\n    );\r\n    let routes = this.getLongestRoutes(\r\n      killMoves,\r\n      this.turn,\r\n      chessboard,\r\n      this.playerSide\r\n    );\r\n    if (routes.length > 0) {\r\n      let startPieces = this.getRoutesStarts(routes);\r\n      this.lockPieces(startPieces);\r\n    } else {\r\n      this.unlockPieces();\r\n    }\r\n    // Selecting\r\n    if (\r\n      clickedId &&\r\n      chessboard[clickedId][\"piece\"] == this.turn &&\r\n      this.selectedPiece !== clickedId\r\n    ) {\r\n      if (\r\n        this.lockedPieces.length == 0 ||\r\n        this.lockedPieces.includes(clickedId)\r\n      ) {\r\n        this.selectPiece(clickedId);\r\n      }\r\n    } else if (\r\n      !(\r\n        clickedId &&\r\n        this.selectedPiece &&\r\n        this.availableMoves.includes(clickedId)\r\n      )\r\n    ) {\r\n      this.unselectPiece();\r\n      this.unsetAvailableMoves();\r\n    }\r\n\r\n    if (this.selectedPiece) {\r\n      let moves = this.getMoves(\r\n        this.selectedPiece,\r\n        chessboard,\r\n        this.turn,\r\n        this.playerSide\r\n      );\r\n      if (this.lockedPieces.length > 0) {\r\n        moves = moves.filter((move) =>\r\n          routes.some((route) => move.move == route[1])\r\n        );\r\n      }\r\n\r\n      this.setAvailableMoves(moves);\r\n    }\r\n\r\n    // movement and killing\r\n    if (\r\n      clickedId &&\r\n      this.availableMoves.includes(clickedId) &&\r\n      this.selectedPiece\r\n    ) {\r\n      let moves = this.getMoves(\r\n        this.selectedPiece,\r\n        chessboard,\r\n        this.turn,\r\n        this.playerSide\r\n      );\r\n      let move = this.getMove(clickedId, moves);\r\n      if (move) {\r\n        this.move(move.piece, clickedId, chessboard);\r\n        this.unsetAvailableMoves();\r\n        this.unselectPiece();\r\n        this.lockPieces([]);\r\n\r\n        let killed = false;\r\n        if (move.kill) {\r\n          this.kill(move.kill, chessboard);\r\n          killed = true;\r\n        }\r\n        if (killed) {\r\n          let routes = this.getLongestRoutes(\r\n            [move.move],\r\n            this.turn,\r\n            chessboard,\r\n            this.playerSide\r\n          );\r\n          if (routes.some((route) => route.length > 1)) {\r\n            this.lockPieces([move.move]);\r\n            this.selectPiece(move.move);\r\n            let moves = this.getMoves(\r\n              move.move,\r\n              chessboard,\r\n              this.turn,\r\n              this.playerSide\r\n            );\r\n            for (let route of routes) {\r\n              this.availableMoves.push(route[1]);\r\n            }\r\n          } else {\r\n            let shouldQueen = this.shouldMakeQueen(move.move, chessboard);\r\n            if (shouldQueen) {\r\n              this.makeQueen(move.move, chessboard);\r\n            }\r\n\r\n            this.switchTurn();\r\n          }\r\n        } else {\r\n          let shouldQueen = this.shouldMakeQueen(move.move, chessboard);\r\n          if (shouldQueen) {\r\n            this.makeQueen(move.move, chessboard);\r\n          }\r\n          this.switchTurn();\r\n        }\r\n      }\r\n    }\r\n    this.setWinner(chessboard, this.turn, this.playerSide);\r\n\r\n    const currentState = {\r\n      selectedPiece: this.selectedPiece,\r\n      chessboard: JSON.stringify(this.chessboard),\r\n      turn: this.turn,\r\n    };\r\n\r\n    if (\r\n      JSON.stringify(oldState) != JSON.stringify(currentState) ||\r\n      this.winner\r\n    ) {\r\n      this.dispatchEvent();\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////\r\n\r\n  shouldMakeQueen(piece: number, chessboard: IChessboard): boolean {\r\n    if (this.playerSide == \"bot\") {\r\n      if (chessboard[piece][\"border-top\"]) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (chessboard[piece][\"border-bot\"]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  makeQueen(id: number, chessboard: IChessboard): void {\r\n    chessboard[id][\"queen\"] = true;\r\n  }\r\n\r\n  switchTurn(): void {\r\n    this.turn = this.turn == \"white\" ? \"black\" : \"white\";\r\n    this.playerSide = this.playerSide == \"bot\" ? \"top\" : \"bot\";\r\n  }\r\n\r\n  kill(target: number, chessboard: IChessboard): IChessboard {\r\n    chessboard[target][\"piece\"] = \"\";\r\n    chessboard[target][\"queen\"] = false;\r\n    return chessboard;\r\n  }\r\n\r\n  // picking Move object based on his move attribute\r\n  getMove(id: number, moves: Moves): Move | null {\r\n    for (let move of moves) {\r\n      if (move.move == id) {\r\n        return move;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  move(from: number, target: number, chessboard: IChessboard) {\r\n    if (chessboard[from][\"queen\"]) {\r\n      chessboard[from][\"queen\"] = false;\r\n      chessboard[target][\"queen\"] = true;\r\n    }\r\n    chessboard[target][\"piece\"] = chessboard[from][\"piece\"];\r\n    chessboard[from][\"piece\"] = \"\";\r\n  }\r\n\r\n  public getMoves(\r\n    selected: number,\r\n    chessboard: IChessboard,\r\n    turn: Turn,\r\n    playerSide: string\r\n  ): Moves {\r\n    let moves: any = [];\r\n    if (chessboard[selected][\"queen\"]) {\r\n      moves = this.getQueenMoves(selected, chessboard, turn);\r\n    } else {\r\n      moves = this.getRegularMoves(selected, chessboard, turn, playerSide);\r\n    }\r\n    return moves;\r\n  }\r\n\r\n  getQueenMoves(selected: number, chessboard: IChessboard, turn: Turn): Moves {\r\n    let moves = this.getObliqueMoves(selected, chessboard);\r\n    moves = this.filterBlockedMoves(chessboard, moves, selected, turn);\r\n    let qMoves = this.getQueenFullMoves(moves, chessboard, selected, turn);\r\n\r\n    return qMoves;\r\n  }\r\n  private getObliqueMoves(queenPosition: number, chessboard: IChessboard) {\r\n    let allMoves: number[][] = [[], [], [], []];\r\n    let current = queenPosition;\r\n\r\n    let borders: Border[] = [\r\n      \"border-left\",\r\n      \"border-top\",\r\n      \"border-right\",\r\n      \"border-bot\",\r\n      \"border-left\",\r\n    ];\r\n    let directions = [-9, -7, 9, 7];\r\n\r\n    for (let i = 0; i < borders.length - 1; i++) {\r\n      let border1 = borders[i];\r\n      let border2 = borders[i + 1];\r\n      let direction = directions[i];\r\n\r\n      while (current >= 0 || current <= 63) {\r\n        allMoves[i].push(current);\r\n        if (chessboard[current][border1] || chessboard[current][border2]) {\r\n          break;\r\n        }\r\n        current += direction;\r\n      }\r\n      current = queenPosition;\r\n      allMoves[i].shift();\r\n    }\r\n\r\n    return allMoves;\r\n  }\r\n\r\n  private filterBlockedMoves(\r\n    chessboard: IChessboard,\r\n    allMoves: number[][],\r\n    queenPosition: number,\r\n    turn: Turn\r\n  ) {\r\n    let newAllMoves: number[][] = [[], [], [], []];\r\n\r\n    for (let i = 0; i < allMoves.length; i++) {\r\n      for (let j = 0; j < allMoves[i].length; j++) {\r\n        let move = allMoves[i][j];\r\n        let move2 = allMoves[i][j + 1];\r\n        if (chessboard[move][\"piece\"] !== turn) {\r\n          if (!chessboard[move][\"piece\"] || !chessboard[move2]?.[\"piece\"]) {\r\n            newAllMoves[i].push(allMoves[i][j]);\r\n          } else {\r\n            break;\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return newAllMoves;\r\n  }\r\n\r\n  private getQueenFullMoves(\r\n    moves: number[][],\r\n    chessboard: IChessboard,\r\n    queenPos: number,\r\n    turn: Turn\r\n  ): Moves {\r\n    let opponent = turn == \"white\" ? \"black\" : \"white\";\r\n    let qMoves = [];\r\n\r\n    for (let i = 0; i < moves.length; i++) {\r\n      let kill;\r\n      for (let j = 0; j < moves[i].length; j++) {\r\n        if (chessboard[moves[i][j]][\"piece\"] == opponent) {\r\n          kill = moves[i][j];\r\n        }\r\n        if (kill !== moves[i][j]) {\r\n          if (kill) {\r\n            qMoves.push({ piece: queenPos, move: moves[i][j], kill: kill });\r\n          } else {\r\n            qMoves.push({ piece: queenPos, move: moves[i][j], kill: null });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return qMoves;\r\n  }\r\n  getRegularMoves(\r\n    selected: number,\r\n    chessboard: IChessboard,\r\n    turn: Turn,\r\n    playerSide: string\r\n  ): Moves {\r\n    let directions = [-9, -7, 7, 9];\r\n    let playerDirections;\r\n\r\n    if (this.playerSide == \"bot\") {\r\n      playerDirections = [-9, -7];\r\n    } else {\r\n      playerDirections = [9, 7];\r\n    }\r\n\r\n    if (chessboard[selected][\"border-left\"]) {\r\n      directions = directions.filter((dir) => dir !== 7);\r\n      directions = directions.filter((dir) => dir !== -9);\r\n    } else if (chessboard[selected][\"border-right\"]) {\r\n      directions = directions.filter((dir) => dir !== -7);\r\n      directions = directions.filter((dir) => dir !== 9);\r\n    }\r\n\r\n    let moves = [];\r\n\r\n    for (let dir of directions) {\r\n      let moveBy1 = selected + dir;\r\n      if (moveBy1 < 0 || moveBy1 > 63) {\r\n        continue;\r\n      }\r\n      let piece = chessboard[moveBy1][\"piece\"];\r\n      if (piece == turn) {\r\n        continue;\r\n      } else if (piece == \"\" && playerDirections.includes(dir)) {\r\n        moves.push({ piece: selected, kill: null, move: moveBy1 });\r\n      } else {\r\n        let moveBy2 = moveBy1 + dir;\r\n        if (moveBy2 < 0 || moveBy2 > 63) {\r\n          continue;\r\n        } else if (\r\n          chessboard[moveBy2][\"border-left\"] &&\r\n          (dir == -7 || dir == 9)\r\n        ) {\r\n          continue;\r\n        } else if (\r\n          chessboard[moveBy2][\"border-right\"] &&\r\n          (dir == -9 || dir == 7)\r\n        ) {\r\n          continue;\r\n        } else if (chessboard[moveBy2][\"square\"] !== \"black\") {\r\n          continue;\r\n        } else if (\r\n          chessboard[moveBy1][\"piece\"] &&\r\n          !chessboard[moveBy2][\"piece\"]\r\n        ) {\r\n          moves.push({ piece: selected, kill: moveBy1, move: moveBy2 });\r\n        }\r\n      }\r\n    }\r\n    return moves;\r\n  }\r\n\r\n  public getAllMovesWithKill(\r\n    chessboard: IChessboard,\r\n    turn: Turn,\r\n    playerSide: string\r\n  ): number[] {\r\n    let killMoves = [];\r\n    for (let i = 0; i < 64; i++) {\r\n      if (chessboard[i][\"piece\"] && chessboard[i][\"piece\"] == turn) {\r\n        let moves = this.getMoves(i, chessboard, turn, playerSide);\r\n        for (let move of moves) {\r\n          if (move.kill) {\r\n            killMoves.push(move.piece);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return killMoves;\r\n  }\r\n\r\n  public getLongestRoutes(\r\n    moves: number[],\r\n    turn: Turn,\r\n    chessboard: IChessboard,\r\n    playerSide: string\r\n  ) {\r\n    let deepPositions: IPosition[] = [];\r\n    let stack: IPosition[] = [];\r\n\r\n    moves.forEach((move) => {\r\n      let board = JSON.parse(JSON.stringify(chessboard));\r\n      let position: IPosition = {\r\n        move: move,\r\n        depth: 0,\r\n        prev: null,\r\n        board: board,\r\n        visited: new Set(),\r\n      };\r\n      stack.push(position);\r\n    });\r\n    let current = stack[stack.length - 1];\r\n    let counter = 0; // for optimization testing porpouse\r\n\r\n    while (current) {\r\n      let temp = [];\r\n      for (let d of stack) {\r\n        temp.push(d);\r\n      }\r\n      counter++;\r\n      if (counter > 20) {\r\n        break;\r\n      }\r\n      current.board[current.move][\"piece\"] = \"\";\r\n      let moves = this.getMoves(current.move, current.board, turn, playerSide);\r\n      let movesWithKill = moves.filter((move) => move.kill !== null);\r\n\r\n      // pushing available moves to stack\r\n      movesWithKill.forEach((move) => {\r\n        let newBoard = JSON.parse(JSON.stringify(current.board));\r\n        if (move.kill) {\r\n          newBoard = this.kill(move.kill, newBoard);\r\n        }\r\n        if (!current.visited.has(move.move)) {\r\n          let visit: Set<number> = new Set();\r\n          let position = {\r\n            move: move.move,\r\n            depth: current.depth + 1,\r\n            prev: current,\r\n            board: newBoard,\r\n            visited: visit,\r\n          };\r\n          stack.push(position);\r\n        }\r\n      });\r\n\r\n      let flatMoves = [];\r\n      for (let i = 0; i < movesWithKill.length; i++) {\r\n        flatMoves.push(movesWithKill[i].move);\r\n      }\r\n      // poping from stack when available moves from current pos are already visited\r\n      if (utility.setIncludesArrayElements(current.visited, flatMoves)) {\r\n        deepPositions.push(current);\r\n        stack.pop();\r\n        current = stack[stack.length - 1];\r\n      }\r\n      // Proceding to stack's top or stopping loop when empty\r\n      if (stack.length > 0) {\r\n        current = stack[stack.length - 1];\r\n      } else {\r\n        break;\r\n      }\r\n      current.prev?.visited.add(current.move);\r\n    }\r\n    let deepest = this.findDeepestMoves(deepPositions);\r\n    let routes = this.getFullRoutes(deepest);\r\n    routes = this.remNestArrayDuplicates(routes);\r\n    for (let route of routes) {\r\n      route.reverse();\r\n    }\r\n    return routes;\r\n  }\r\n\r\n  private remNestArrayDuplicates(array: number[][]) {\r\n    let set = new Set();\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      set.add(JSON.stringify(array[i]));\r\n    }\r\n    let arr: any = Array.from(set);\r\n    let filtered = [];\r\n    for (let elem of arr) {\r\n      filtered.push(JSON.parse(elem));\r\n    }\r\n    return filtered;\r\n  }\r\n\r\n  private findDeepestMoves(moves: IPosition[]): IPosition[] {\r\n    if (moves.length == 0) {\r\n      return [];\r\n    }\r\n    moves.sort((a, b) => b.depth - a.depth);\r\n    let highest = moves[0].depth;\r\n    let deepest = [];\r\n\r\n    for (let move of moves) {\r\n      if (move.depth >= highest) {\r\n        deepest.push(move);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return deepest;\r\n  }\r\n\r\n  private getFullRoutes(deepestPositions: IPosition[]): number[][] {\r\n    let routes: number[][] = [];\r\n    deepestPositions.forEach((position) => {\r\n      let route = [];\r\n      let current: IPosition | null = position;\r\n      while (current) {\r\n        route.push(current.move);\r\n        current = current.prev;\r\n      }\r\n      routes.push(route);\r\n    });\r\n    return routes;\r\n  }\r\n\r\n  filterMovesWithoutKill(moves: Moves): Moves {\r\n    let filtered = moves.filter((move) => move.kill !== null);\r\n    return filtered;\r\n  }\r\n\r\n  getAllMoves(chessboard: IChessboard, turn: Turn, playerSide: string): Moves {\r\n    let allMoves = [];\r\n    for (let i = 0; i < 64; i++) {\r\n      if (chessboard[i][\"piece\"] == turn) {\r\n        let moves = this.getMoves(i, chessboard, turn, playerSide);\r\n        allMoves.push(...moves);\r\n      }\r\n    }\r\n    return allMoves;\r\n  }\r\n}\r\n"]}