{"version":3,"file":"App.js","sourceRoot":"","sources":["../src/App.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Board from \"./components/Board\";\r\nimport GameMenu from \"./components/gameMenu/GameMenu\";\r\nimport Lobby from \"./components/lobby/Lobby\";\r\nimport GamePreview from \"./components/GamePreview\";\r\nimport Game from \"./game\";\r\nimport { GAMEMODE } from \"./game\";\r\nimport InputName from \"./components/InputName\";\r\nimport { SIDE } from \"./config\";\r\nimport { IPlayer } from \"./components/lobby/Lobby\";\r\nimport ConnectMenu from \"./components/ConnectMenu\";\r\nimport reverseChessboard from \"./reverseChessboard\";\r\n\r\nimport { socket } from \"./main\";\r\n\r\ntype Color = \"black\" | \"white\";\r\nexport interface Rematch {\r\n  requested: boolean;\r\n  player: IPlayer | null;\r\n  gameId: number;\r\n  roomId: string;\r\n};\r\n\r\ninterface State {\r\n  name: string;\r\n  games: Game[];\r\n  newGameError: string;\r\n  currentGame: Game | null;\r\n  players: IPlayer[];\r\n  connected: boolean;\r\n  nameError: string;\r\n  rematches: Rematch[];\r\n};\r\ninterface Props {};\r\n\r\nexport default class App extends React.Component<Props, State> {\r\n  menuPosition: \"center\" | \"right\";\r\n  gameCounter: number;\r\n  justStarted: boolean;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      games: [],\r\n      newGameError: \"\",\r\n      currentGame: null,\r\n      players: [],\r\n      connected: false,\r\n      nameError: \"\",\r\n      rematches: [],\r\n    };\r\n    this.menuPosition = \"center\";\r\n    this.gameCounter = 0;\r\n    this.justStarted = true;\r\n  }\r\n\r\n  setName = (name: string) => {\r\n    socket.emit(\"request_players_list\");\r\n    this.setState({ name });\r\n  };\r\n\r\n  getLabel(mode: GAMEMODE) {\r\n    switch (mode) {\r\n      case GAMEMODE.BOT:\r\n        return \"vsComp\";\r\n      case GAMEMODE.LOCAL:\r\n        return \"local\";\r\n      case GAMEMODE.ONLINE:\r\n        return \"player\";\r\n    }\r\n  }\r\n\r\n  connect = () => {\r\n    if (this.state.name.length == 0) {\r\n      this.setState({ nameError: \"Enter your name\" });\r\n    } else if (this.checkNameTaken()) {\r\n      this.setState({ nameError: \"This name is taken\" });\r\n    } else {\r\n      socket.emit(\"player-connected\", this.state.name);\r\n      this.setState({ connected: true });\r\n    }\r\n  };\r\n\r\n  startNewGame = (\r\n    gameMode: GAMEMODE,\r\n    side: SIDE,\r\n    color: Color,\r\n    label: string,\r\n    gameId: number,\r\n    roomId = \"\"\r\n  ): boolean => {\r\n    const game = new Game(gameMode, color, side, label, gameId, roomId);\r\n    this.setState((prevState) => {\r\n      return {\r\n        currentGame: game,\r\n        games: [...prevState.games, game],\r\n      };\r\n    });\r\n    return true;\r\n  };\r\n\r\n  switchGame = (id: number) => {\r\n    const game = this.state.games.find((game) => game.id == id);\r\n    if (game) {\r\n      this.setState({\r\n        currentGame: game,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkNameTaken() {\r\n    let taken = this.state.players.filter(\r\n      (player) => this.state.name == player.name\r\n    );\r\n    if (taken.length > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  closeGame = (gameId: number) => {\r\n    const game = this.state.games.find((g) => g.id == gameId);\r\n    if (game == this.state.currentGame) {\r\n      this.setState((state) => {\r\n        return {\r\n          games: state.games.filter((g) => g.id != gameId),\r\n          currentGame: null,\r\n        };\r\n      });\r\n    } else {\r\n      this.setState((state) => {\r\n        return {\r\n          games: state.games.filter((g) => g.id != gameId),\r\n        };\r\n      });\r\n    }\r\n  };\r\n  restartGame = (gameId: number = 0) => {\r\n    let game: any;\r\n    if (gameId) {\r\n      game = this.state.games.find((g) => g.id == gameId);\r\n    } else {\r\n      game = this.state.currentGame;\r\n    }\r\n\r\n    if (game) {\r\n      let index = this.state.games.findIndex((g) => {\r\n        return g.id == game.id;\r\n      });\r\n      let games = this.state.games;\r\n      const newGame = new Game(\r\n        game.gameMode,\r\n        game.playerColor,\r\n        game.side,\r\n        game.label,\r\n        gameId,\r\n        game.roomId\r\n      );\r\n      games[index] = newGame;\r\n      this.setState({ games, currentGame: newGame });\r\n    }\r\n  };\r\n\r\n  getPlayer(name: string) {\r\n    let player = this.state.players.find((player) => player.name == name);\r\n    if (!player) {\r\n      player = this.state.players[0];\r\n    }\r\n    return player;\r\n  }\r\n\r\n  componentDidMount() {\r\n    socket.on(\"get_players\", (players) => {\r\n      this.setState({ players });\r\n    });\r\n\r\n    socket.on(\"player_disconnected\", (player: IPlayer) => {\r\n      const game = this.state.games.find((g) => g.label == player.name);\r\n      if (game) {\r\n        this.closeGame(game.id);\r\n      }\r\n    });\r\n\r\n    socket.on(\"move_made\", ({ chessboard, id, turn, winner, gameRoomId }) => {\r\n      this.setState((prevState) => {\r\n        const gameIndex = prevState.games.findIndex((g) => g.id == id);\r\n        let gamesBefore = prevState.games.slice(0, gameIndex);\r\n        let gamesAfter = prevState.games.slice(\r\n          gameIndex + 1,\r\n          prevState.games.length\r\n        );\r\n        let game = prevState.games[gameIndex];\r\n        game.engine.chessboard = reverseChessboard(chessboard);\r\n        game.engine.turn = turn;\r\n        game.engine.winner = winner;\r\n        game.engine.playerSide = \"bot\";\r\n        const currentGame = prevState.currentGame;\r\n        if (prevState.currentGame?.id == id) {\r\n          currentGame == game;\r\n        }\r\n        return {\r\n          games: [...gamesBefore, game, ...gamesAfter],\r\n          currentGame: currentGame,\r\n        };\r\n      });\r\n    });\r\n\r\n    socket.on(\"player_wants_rematch\", (rematch: Rematch) => {\r\n      this.setState((prevState) => {\r\n        return {\r\n          rematches: [...prevState.rematches, rematch],\r\n        };\r\n      });\r\n    });\r\n    socket.on(\"game_restarted\", (id: number) => {\r\n      this.restartGame(id);\r\n    });\r\n\r\n    socket.on(\"player_closed_game\", (info) => {\r\n      this.closeGame(info.gameId);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.off();\r\n  }\r\n\r\n  render() {\r\n    const player = this.getPlayer(this.state.name);\r\n\r\n    let games = this.state.games;\r\n    let gameMenuCentered = this.state.currentGame ? false : true;\r\n    if (this.state.connected) {\r\n      return (\r\n        <div id=\"app\" className=\"app\">\r\n          <GamePreview\r\n            games={games}\r\n            switchGame={this.switchGame}\r\n            closeGame={this.closeGame}\r\n            currentGame={this.state.currentGame}\r\n          />\r\n          <Lobby name={this.state.name} startNewGame={this.startNewGame} />\r\n          {this.state.currentGame && (\r\n            <Board\r\n              game={this.state.currentGame}\r\n              restartGame={this.restartGame}\r\n              player={player}\r\n              rematches={this.state.rematches}\r\n            />\r\n          )}\r\n          <GameMenu\r\n            startNewGame={this.startNewGame}\r\n            centered={gameMenuCentered}\r\n            error={this.state.newGameError}\r\n            games={this.state.games}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <InputName setName={this.setName} error={this.state.nameError} />\r\n          <ConnectMenu connect={this.connect} />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}