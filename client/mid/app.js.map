{"version":3,"file":"App.js","sourceRoot":"","sources":["../src/App.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Board from \"./components/board\";\r\nimport GameMenu from \"./components/gameMenu/gameMenu\";\r\nimport Lobby from \"./components/lobby/lobby\";\r\nimport GamePreview from \"./components/gamePreview\";\r\nimport Game from \"./game\";\r\nimport { GAMEMODE } from \"./game\";\r\nimport InputName from \"./components/inputName\";\r\nimport { SIDE } from \"./config\";\r\nimport { IPlayer } from \"./components/lobby/lobby\";\r\nimport ConnectMenu from \"./components/connectMenu\";\r\n\r\nimport { socket } from \"./main\";\r\n\r\n\r\ntype Color = \"black\" | \"white\";\r\n\r\ntype State = {\r\n    name: string;\r\n    games: Game[];\r\n    newGameError: string;\r\n    currentGame: Game | null;\r\n    players: IPlayer[];\r\n    connected: boolean;\r\n    nameError: string;\r\n}\r\ntype Props = {\r\n\r\n}\r\n\r\nexport default class App extends React.Component<Props, State> {\r\n\r\n    menuPosition: \"center\" | \"right\";\r\n    gameId: number;\r\n    justStarted: boolean;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            games: [],\r\n            newGameError: \"\",\r\n            currentGame: null,\r\n            players: [],\r\n            connected: false,\r\n            nameError: \"\",\r\n        }\r\n        this.menuPosition = 'center';\r\n        this.gameId = 0;\r\n        this.justStarted = true;\r\n\r\n    }\r\n\r\n    setName = (name: string) => {\r\n        this.requestPlayerList()\r\n        this.setState({name});\r\n    }\r\n\r\n\r\n    getLabel(mode: GAMEMODE) {\r\n        switch (mode) {\r\n            case GAMEMODE.BOT:\r\n                return 'vsComp';\r\n            case GAMEMODE.LOCAL:\r\n                return \"local\";\r\n            case GAMEMODE.ONLINE:\r\n                return \"player\";\r\n        }\r\n    }\r\n\r\n    connect = () => {\r\n        if (this.state.name.length == 0) {\r\n            this.setState({nameError: \"Enter your name\"})\r\n        } else if (this.checkNameTaken()) {\r\n            this.setState({nameError: \"This name is taken\"})\r\n        } else {\r\n            socket.emit(\"player-connected\", this.state.name);\r\n            this.setState({connected: true});\r\n        }\r\n        \r\n    }\r\n\r\n    startNewGame = (gameMode: GAMEMODE, side: SIDE, color: Color, label: string): boolean => {\r\n        if (this.state.games.length == 4) {\r\n            this.setState({newGameError: \"Game quantity reached. Close some game\"})\r\n            return false;\r\n        } else {\r\n            const game = new Game(gameMode, color, side, label, this.gameId++);\r\n            this.setState((prevState) => {\r\n                return {\r\n                    currentGame: game,\r\n                    games: [...prevState.games, game]\r\n                }\r\n            })\r\n            return true;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    switchGame = (id: number) => {\r\n        const game = this.state.games.filter((game) => game.id == id)[0];\r\n        if (game) {\r\n            this.setState({\r\n                currentGame: game\r\n            })\r\n        }\r\n    }\r\n\r\n    requestPlayerList() {\r\n        socket.emit(\"request_players_list\");\r\n    }\r\n    checkNameTaken() {\r\n        let taken = this.state.players.filter((player) => this.state.name == player.name);\r\n        if (taken.length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    closeGame = (gameId: number) => {\r\n        this.setState((state) => {\r\n            return {\r\n                games: state.games.filter((game) => game.id != gameId),\r\n                currentGame: null,\r\n            }\r\n        })\r\n    }\r\n    restartGame =() => {\r\n        const game = this.state.currentGame;\r\n\r\n        if (game) {\r\n            let index = this.state.games.findIndex((g) => {\r\n                return g.id == game.id;\r\n            });\r\n            let games = this.state.games;\r\n            const newGame = new Game(game.gameMode, game.playerColor, game.side, game.label, game.id);\r\n            games[index] = newGame;\r\n            this.setState({games, currentGame: newGame});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        socket.on(\"get_players\", (players) => {\r\n            this.setState({ players })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.currentGame);\r\n        console.log(this.state.connected)\r\n        let games = this.state.games;\r\n        let gameMenuCentered = this.state.currentGame ? false : true;\r\n        if (this.state.connected) {\r\n            return (\r\n                <div id=\"app\" className=\"app\">\r\n                    <GamePreview games={games} switchGame={this.switchGame} closeGame={this.closeGame}/>\r\n                    <Lobby name={this.state.name} />\r\n                    <GameMenu startNewGame={this.startNewGame} centered={gameMenuCentered}/>\r\n                    {this.state.currentGame && <Board game={this.state.currentGame} restartGame={this.restartGame} />}\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    <InputName setName={this.setName} error={this.state.nameError}/>\r\n                    <ConnectMenu connect={this.connect}/>\r\n\r\n                </>\r\n            \r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n"]}